@inherits Merchello.Web.Mvc.MerchelloViewPage<Merchello.Web.Store.Models.StoreAddItemModel>
@using System.Text
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using Merchello.Core
@using Merchello.Web
@using Merchello.Web.Models.VirtualContent
@using Merchello.Web.Store.Controllers
@using Umbraco.Web
@{
    // Get the IProductContent from the Merchello helper which is already instantiated by the MerchelloViewPage reference.
    //// https://merchello.readme.io/docs/view-pages
    //
    // This is in most cases retrieved from the Examine index (so really fast) but it does have a fallback to query the database
    // in cases where the product has not been indexed.
    var product = Merchello.TypedProductContent(Model.ProductKey);

    // Local variable for partial view conditionals
    var hasVariants = product.ProductVariants.Any();
}



    
        @using (Html.BeginUmbracoForm<StoreBasketController>("AddBasketItem", new { area = "Merchello" }, new { role = "form", data_muifrm = "additem", style= "text-align:center" }))
        {
            // If the product has variants, we MUST determine which variant the customer intends to purchase
            // so we need to give them a selection of options so that they make choices.  The collection of choices (one per options)
            // is used to determine which variant they intend to purchase.
            <a data-muivalue="product" data-muikey="@product.Key" class="add-to-cart">
                @if (hasVariants)
                {
                var index = 0;

                // Generate the drop down boxes to select choices for each option
                foreach (var option in Model.ProductOptions)
                {

                var choices = option.Choices.OrderBy(x => x.SortOrder).Select(choice => new System.Web.Mvc.SelectListItem { Value = choice.Key.ToString(), Text = choice.Name }).ToList();
                choices.First().Selected = true;

                @Html.LabelFor(x => x.OptionChoices[index], option.Name, new { @class = "control-label" })

                <div class="form-group" data-muioption="@option.Key">
                    @Html.DropDownListFor(x => x.OptionChoices[index], choices, new { name = option.Name.ToLower().Replace(" ", "-"), @class = "form-control" })
                    @*@Html.ValidationMessageFor(x => x.OptionChoices, "Please select one")*@
                </div>

                index = index + 1;
                }

                }



                @Html.HiddenFor(x => x.ProductKey)
                @Html.HiddenFor(x => x.SuccessRedirectUrl)
                @Html.AntiForgeryToken()
                <input class="btn btn-success btn-lg" type="submit" value="Mua ngay" />
                
            </a>
        }



@functions
{

    private static IHtmlString GetSingleProductPrice(IProductContent product)
    {
        var sb = new StringBuilder();
        if (product.OnSale)
        {
            sb.AppendFormat("<span class='sale-price'>{0}</span>", product.SalePrice.AsFormattedCurrency());
            sb.AppendFormat("<span class='original-price'>{0}</span>", product.Price.AsFormattedCurrency());
        }
        else
        {
            sb.AppendFormat("<span>{0}</span>", product.Price.AsFormattedCurrency());
        }

        return MvcHtmlString.Create(sb.ToString());
    }
}