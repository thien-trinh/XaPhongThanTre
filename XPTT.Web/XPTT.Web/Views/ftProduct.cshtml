@inherits Umbraco.Web.Mvc.UmbracoViewPage<Merchello.Web.Models.VirtualContent.IProductContent>
@using Merchello.FastTrack.Ui
@using Merchello.Web
@using Merchello.Web.Models
@using Merchello.Web.Models.Ui.Rendering
@using Merchello.Web.Models.VirtualContent
@{
    Layout = "MasterPage.cshtml";

    // the Model passed here is IProductContent (virtual content) that is not generated by the Models Builder.
    // However, it is a Typed IPublishedContent model that exposes product properties such as Price, SalePrice, etc.
    // and the properties from the ContentType that was attached to the product in Merchello's back office.
    // These can be accessed in the same way as any normal IPublishedContent property e.g. GetPropertyValue

    var featureImage = Model.HasValue("image") ? Umbraco.Media(Model.GetPropertyValue<string>("image")).umbracoFile : "";
    var homepage = Umbraco.TypedContentAtRoot().First() as IPublishedContent;
    IEnumerable<Merchello.Web.Models.VirtualContent.IProductContent> listProducts = homepage != null ?
homepage.GetPropertyValue<IEnumerable<Merchello.Web.Models.VirtualContent.IProductContent>>("FeatureProducts")
: Enumerable.Empty<Merchello.Web.Models.VirtualContent.IProductContent>();
    string metaTitle = (!String.IsNullOrEmpty(Model.GetPropertyValue<string>("pageTitle")) ? Model.GetPropertyValue<string>("pageTitle") : Model.Name);
    string metaDescription = !String.IsNullOrEmpty(Model.GetPropertyValue<string>("metaDescription")) ? Model.GetPropertyValue<string>("metaDescription") : "";
}



<span itemscope itemtype="http://schema.org/Product">

    <meta itemprop="image" content="@("https://xaphongthantre.vn"+featureImage)" />
    <meta itemprop="name" content="@metaTitle">
    <meta itemprop="description" content="@metaDescription">
    <meta itemprop="brand" content="Hoa Lan">
    <meta itemprop="color" content="Black">
    <meta itemprop="url" content="@Model.UrlAbsolute()"/>
    <span itemprop="audience" itemscope itemtype="http://schema.org/PeopleAudience">
        <meta itemprop="suggestedGender" content="unisex" />
    </span>
    <span itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        <meta itemprop="priceCurrency" content="VND" />
        <meta itemprop="price" content="@Model.Price">
        <link itemprop="itemCondition" href="http://schema.org/UsedCondition" content="NewCondition" />
        <link itemprop="availability" href="http://schema.org/InStock" content="InStock" />
    </span>
</span>

<div class="wrapper">
    <div class="container" id="main">

        <!-- Content -->
        <article id="content">
            <header>
                <h2>@Model.Name</h2>
                <p>
                    Giá bán lẻ: @String.Format("{0:n0}", Model.Price) VND
                    @Html.Action("AddProductToBasketForm", "StoreBasket", new { area = "Merchello", model = Model })
                    
                </p>
            </header>
            <a href="#" class="image featured"><img src="@featureImage" alt="" /></a>
            <p>
                @Html.Raw(Model.GetPropertyValue<string>("brief"))
            </p>
            @Html.Raw(Model.GetPropertyValue<string>("description"))
        </article>
        <div class="product-detail-add-to-basket-bottom-full-width">
        @Html.Action("AddProductToBasketForm", "StoreBasket", new { area = "Merchello", model = Model })
        </div>
    </div>


</div>
<div class="wrapper">
    <section class="container">
        <header class="major" id="list_products">
            <h2>100% sản phẩm được chiết xuất từ thiên nhiên 100%</h2>
            <p>Sự khác biệt cơ bản giữa mỹ phẩm thiên nhiên và mỹ phẩm thường nằm ở Chất lượng nguyên liệu. Mỹ phẩm thiên nhiên nuôi dưỡng và phục hồi tế bào da, tóc bằng tinh dầu, chiết xuất và các hoạt chất khác từ thiên nhiên …</p>
        </header>
        @Html.Partial("/Views/Partials/ListProductsAtHomePage.cshtml", listProducts)
    </section>
</div>
<script type="text/javascript">
    fbq('track', 'ViewContent',
        {
            content_ids: ['@Model.Name'],
            content_type: 'product',
            value: @Model.Price,
            currency: 'VND'
        }
    );
</script>


@helper Categories(IProductContent product)
{
var collections = product.Collections().ToArray();
if (collections.Any())
{
    var pages = new List<Tuple<IProductCollection, IPublishedContent>>();
    foreach (var col in collections)
    {
        var page = ExampleUiHelper.Content.GetCategoryPageForCollection(col.Key);
        if (page != null)
        {
            pages.Add(new Tuple<IProductCollection, IPublishedContent>(col, page));
        }
    }
    var needsComma = false;
        <small>
            Categories:
            @foreach (var pc in pages)
            {
                @Umbraco.If(needsComma, ",") <a href="@pc.Item2.Url">@pc.Item1.Name</a>
                needsComma = true;
            }
        </small>
}
}