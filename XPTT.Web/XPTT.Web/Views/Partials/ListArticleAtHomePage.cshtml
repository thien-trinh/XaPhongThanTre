@inherits Umbraco.Web.Mvc.UmbracoTemplatePage


@*
    This snippet shows how simple it is to fetch only children of a certain Document Type using Razor.
    Be sure to change "DocumentTypeAlias" below to match your needs, such as "TextPage" or "NewsItems".
    (You can find the alias of your Document Type by editing it in the Settings section)
*@

@{   var selection = CurrentPage.AncestorOrSelf(1).Descendants("articlePage").Where("ShowOnHomePage == true").Where("Visible").OrderBy("CreateDate desc").Take(3); }
@*
    As an example of more querying, if you have a true/false property with the alias of shouldBeFeatured:
    var selection= CurrentPage.Children("DocumentTypeAlias").Where("shouldBeFeatured == true").Where("Visible");
*@


@if (selection.Any())
{
    <div class="wrapper">
        <div class="container">
            <div class="row">
                @foreach (var item in selection)
                {
                    var featureImage = item.GetPropertyValue<string>("FeatureImage") != null ? Umbraco.Media(item.GetPropertyValue<string>("FeatureImage")).umbracoFile : "";
                    <section class="4u 12u(narrower) feature">
                        <div class="image-wrapper first" style="width: 357px; height: 215px;">
                            <a href="@item.Url" class="image featured first"><img src="@featureImage" alt="" /></a>
                        </div>
                        <header>
                            <h2>
                                <a href="@item.Url"> @item.PageName</a>
                            </h2>
                        </header>
                        <p>
                            @item.PageDescription
                        </p>
                        <ul class="actions">
                            <li><a href="@item.Url" class="button">Xem thêm</a></li>
                        </ul>
                    </section>
                }
            </div>
        </div>
    </div>
}